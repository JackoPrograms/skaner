from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from django.shortcuts import render
import os

import subprocess

def index(request):
    return render(request, 'index.html')

def save_file(file_path, content):
    try:
        with open(file_path, 'w') as file:
            file.write(content)
        return 'File saved'
    except FileNotFoundError:
        # Если файл не существует, создайте его и запишите данные
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        with open(file_path, 'w') as file:
            file.write(content)
        return 'File created and saved'
    except Exception as e:
        return str(e), 500

@csrf_exempt
@require_POST
def create_domain_file(request):
    text = request.body.decode('utf-8')
    return HttpResponse(save_file('./automated_scanning/domain_name.txt', text))

@csrf_exempt
@require_POST
def create_tags_file(request):
    tags = request.body.decode('utf-8')
    return HttpResponse(save_file('./automated_scanning/tags_vulnerabilities.txt', tags))

@csrf_exempt
@require_POST
def create_severity_file(request):
    severity = request.body.decode('utf-8')
    return HttpResponse(save_file('./automated_scanning/severity_vulnerabilities.txt', severity))

@csrf_exempt
@require_POST
def start_scan_command(request):
    try:
        subprocess.run(["python3", "create_BD.py"])
        subprocess.run(["bash", "script.sh"])
        return HttpResponse('Scan started')
    except Exception as e:
        return HttpResponse(str(e), status=500)


def restart_server(request):
    try:
        # Запускаем команду для перезапуска сервера
        subprocess.run(["python3", "..\\manage.py", "runserver"])
        message = "Server restarted successfully."
    except Exception as e:
        message = f"Error restarting server: {str(e)}"
    
    return HttpResponse(message)